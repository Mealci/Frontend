name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

permissions:
  contents: read
  pull-requests: write

jobs:
  ci-push:
    name: V√©rifications CI (Base)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: V√©rifier si la CI doit √™tre ex√©cut√©e
      id: check_run
      run: |
        if [[ ${{ github.event_name }} == 'push' ]]; then
          PR_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                   "https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:${{ github.ref_name }}&state=open" \
                   | jq -r '.[0].url')
          if [[ $PR_URL != "null" ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Une PR est active pour cette branche. Skipping CI pour le push."
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "skip=false" >> $GITHUB_OUTPUT
        fi

    - name: Configuration de Flutter
      if: steps.check_run.outputs.skip != 'true'
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.2'
        channel: 'stable'
    
    - name: D√©sactiver les animations CLI
      if: steps.check_run.outputs.skip != 'true'
      run: flutter config --no-cli-animations
    
    - name: Obtenir les d√©pendances
      if: steps.check_run.outputs.skip != 'true'
      run: |
        echo -e "\e[1;34müîç Obtention des d√©pendances...\e[0m"
        flutter pub get
        echo -e "\e[1;32m‚úÖ D√©pendances r√©cup√©r√©es avec succ√®s !\e[0m"
    
    - name: Formater le code
      if: steps.check_run.outputs.skip != 'true'
      run: |
        echo -e "\e[1;34müñåÔ∏è Formatage du code...\e[0m"
        dart format --set-exit-if-changed .
        echo -e "\e[1;32m‚úÖ Code format√© avec succ√®s !\e[0m"
    
    - name: Ex√©cuter les tests
      if: steps.check_run.outputs.skip != 'true'
      run: |
        echo -e "\e[1;34müß™ Ex√©cution des tests...\e[0m"
        echo -e "Place holder pour flutter test"
        # flutter test
        echo -e "\e[1;32m‚úÖ Tests termin√©s avec succ√®s !\e[0m"
    
    - name: V√©rifier la porte de qualit√©
      if: steps.check_run.outputs.skip != 'true' && success()
      run: |
        echo -e "\e[1;32m‚úÖ Porte de qualit√© de base pass√©e\e[0m"
    
    - name: Notifier l'√©chec
      if: steps.check_run.outputs.skip != 'true' && failure()
      run: |
        echo -e "\e[1;31m‚ùå Les v√©rifications de base ont √©chou√©. Veuillez corriger les probl√®mes et mettre √† jour.\e[0m"
        exit 1

  ci-pr:
    name: V√©rifications CI (Pull Request)
    if: github.event_name == 'pull_request'
    needs: ci-push
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Configuration de Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.2'
        channel: 'stable'
    
    - name: D√©sactiver les animations CLI
      run: flutter config --no-cli-animations
    
    - name: Obtenir les d√©pendances
      run: |
        echo -e "\e[1;34müîç Obtention des d√©pendances...\e[0m"
        flutter pub add --dev dependency_validator
        flutter pub get
        echo -e "\e[1;32m‚úÖ D√©pendances r√©cup√©r√©es avec succ√®s !\e[0m"
    
    - name: Analyser le code
      id: code_analysis
      run: |
        echo -e "\e[1;34müîé Analyse du code...\e[0m"
        dart analyze > dart_analysis.txt
        flutter analyze > flutter_analysis.txt
        echo -e "\e[1;32m‚úÖ Analyse du code termin√©e !\e[0m"

    - name: Ex√©cuter les tests d'int√©gration
      run: |
        echo -e "\e[1;34müß™ Ex√©cution des tests d'int√©gration...\e[0m"
        echo "espace r√©serv√© pour flutter drive --target=test_driver/app.dart"
        echo -e "\e[1;32m‚úÖ Tests d'int√©gration termin√©s avec succ√®s !\e[0m"
    
    - name: V√©rification des vuln√©rabilit√©s
      id: vulnerability_check
      run: |
        echo -e "\e[1;34müõ°Ô∏è V√©rification des vuln√©rabilit√©s connues...\e[0m"
        vulnerability_output=""
        while read pkg; do
          result=$(curl -s "https://pub.dev/api/packages/${pkg%@*}/versions/${pkg#*@}" | jq -r '.vulnerability')
          if [ "$result" != "null" ]; then
            vulnerability_output+="‚ö†Ô∏è Vuln√©rabilit√© d√©tect√©e pour $pkg: $result\n"
          fi
        done < <(flutter pub deps --json | jq -r '.packages[] | .name + "@" + .version')
        echo "vulnerability_output<<EOF" >> $GITHUB_ENV
        echo "$vulnerability_output" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo -e "\e[1;32m‚úÖ V√©rification des vuln√©rabilit√©s termin√©e !\e[0m"
    
    - name: V√©rifier la porte de qualit√© PR
      if: success()
      run: |
        echo -e "\e[1;32m‚úÖ Porte de qualit√© PR pass√©e\e[0m"
    
    - name: Notifier l'√©chec PR
      if: failure()
      run: |
        echo -e "\e[1;31m‚ùå Les v√©rifications de PR ont √©chou√©. Veuillez corriger les probl√®mes et mettre √† jour la pull request.\e[0m"
        exit 1

    - name: Pr√©parer le commentaire
      id: prepare_comment
      run: |
        COMMENT_BODY=""
        
        # Fonction pour v√©rifier si l'analyse contient des probl√®mes
        has_issues() {
          ! grep -qE "^No issues found" <<< "$1"
        }
        
        # V√©rifier l'analyse du code Dart
        DART_OUTPUT=$(cat dart_analysis.txt)
        if has_issues "$DART_OUTPUT"; then
          COMMENT_BODY+="### Analyse du code Dart\n\`\`\`\n$DART_OUTPUT\n\`\`\`\n\n"
        fi
        
        # V√©rifier l'analyse du code Flutter
        FLUTTER_OUTPUT=$(cat flutter_analysis.txt)
        if has_issues "$FLUTTER_OUTPUT"; then
          COMMENT_BODY+="### Analyse du code Flutter\n\`\`\`\n$FLUTTER_OUTPUT\n\`\`\`\n\n"
        fi
        
        # V√©rifier les vuln√©rabilit√©s
        if [[ -n "$VULNERABILITY_OUTPUT" ]]; then
          COMMENT_BODY+="### Analyse de s√©curit√©\n\`\`\`\n$VULNERABILITY_OUTPUT\n\`\`\`\n\n"
        fi
        
        # Si aucune information n'a √©t√© ajout√©e, indiquer que tout est propre
        if [[ -z "$COMMENT_BODY" ]]; then
          COMMENT_BODY="‚úÖ Toutes les v√©rifications sont pass√©es. Le code est propre et pr√™t √† √™tre fusionn√©."
        else
          COMMENT_BODY="## R√©sultats des v√©rifications CI\n\n${COMMENT_BODY}\nVeuillez examiner ces r√©sultats et apporter les am√©liorations n√©cessaires."
        fi
        
        echo "comment_body<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMENT_BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Commenter les r√©sultats de l'analyse
      if: always()
      uses: peter-evans/create-or-update-comment@v3
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: ${{ steps.prepare_comment.outputs.comment_body }}