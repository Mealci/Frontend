name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

permissions:
  contents: read
  pull-requests: write

jobs:
  ci-push:
    name: Vérifications CI (Base)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Vérifier si la CI doit être exécutée
      id: check_run
      run: |
        if [[ ${{ github.event_name }} == 'push' ]]; then
          PR_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                   "https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:${{ github.ref_name }}&state=open" \
                   | jq -r '.[0].url')
          if [[ $PR_URL != "null" ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Une PR est active pour cette branche. Skipping CI pour le push."
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "skip=false" >> $GITHUB_OUTPUT
        fi

    - name: Configuration de Flutter
      if: steps.check_run.outputs.skip != 'true'
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.2'
        channel: 'stable'
    
    - name: Désactiver les animations CLI
      if: steps.check_run.outputs.skip != 'true'
      run: flutter config --no-cli-animations
    
    - name: Obtenir les dépendances
      if: steps.check_run.outputs.skip != 'true'
      run: |
        echo -e "\e[1;34m🔍 Obtention des dépendances...\e[0m"
        flutter pub get
        echo -e "\e[1;32m✅ Dépendances récupérées avec succès !\e[0m"
    
    - name: Formater le code
      if: steps.check_run.outputs.skip != 'true'
      run: |
        echo -e "\e[1;34m🖌️ Formatage du code...\e[0m"
        dart format --set-exit-if-changed .
        echo -e "\e[1;32m✅ Code formaté avec succès !\e[0m"
    
    - name: Exécuter les tests
      if: steps.check_run.outputs.skip != 'true'
      run: |
        echo -e "\e[1;34m🧪 Exécution des tests...\e[0m"
        echo -e "Place holder pour flutter test"
        # flutter test
        echo -e "\e[1;32m✅ Tests terminés avec succès !\e[0m"
    
    - name: Vérifier la porte de qualité
      if: steps.check_run.outputs.skip != 'true' && success()
      run: |
        echo -e "\e[1;32m✅ Porte de qualité de base passée\e[0m"
    
    - name: Notifier l'échec
      if: steps.check_run.outputs.skip != 'true' && failure()
      run: |
        echo -e "\e[1;31m❌ Les vérifications de base ont échoué. Veuillez corriger les problèmes et mettre à jour.\e[0m"
        exit 1

  ci-pr:
    name: Vérifications CI (Pull Request)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Configuration de Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.2'
        channel: 'stable'
    
    - name: Désactiver les animations CLI
      run: flutter config --no-cli-animations
    
    - name: Obtenir les dépendances
      run: |
        echo -e "\e[1;34m🔍 Obtention des dépendances...\e[0m"
        flutter pub add --dev dependency_validator
        flutter pub get
        echo -e "\e[1;32m✅ Dépendances récupérées avec succès !\e[0m"

    - name: Analyser le code
      id: analyze
      run: |
        echo -e "\e[1;34m🔎 Analyse du code...\e[0m"
        dart analyze > dart_analysis.txt 2>&1 || true
        flutter analyze > flutter_analysis.txt 2>&1 || true
        if [ -s dart_analysis.txt ] || [ -s flutter_analysis.txt ]; then
          echo "analyze_error=true" >> $GITHUB_OUTPUT
        else
          echo "analyze_error=false" >> $GITHUB_OUTPUT
        fi
        echo -e "\e[1;32m✅ Analyse du code terminée !\e[0m"

    - name: Commenter l'erreur d'analyse
      if: steps.analyze.outputs.analyze_error == 'true'
      uses: peter-evans/create-or-update-comment@v3
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## Rapport CI : Analyse du code
          ### Analyse Dart
          ```
          ${{ steps.analyze.outputs.dart_analysis }}
          ```
          ### Analyse Flutter
          ```
          ${{ steps.analyze.outputs.flutter_analysis }}
          ```

    - name: Exécuter les tests
      id: test
      run: |
        echo -e "\e[1;34m🧪 Exécution des tests...\e[0m"
        flutter test > test_output.txt 2>&1 || true
        echo "test_output<<EOF" >> $GITHUB_OUTPUT
        cat test_output.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        if [ $? -ne 0 ]; then
          echo "test_error=true" >> $GITHUB_OUTPUT
        else
          echo "test_error=false" >> $GITHUB_OUTPUT
        fi
        echo -e "\e[1;32m✅ Tests terminés !\e[0m"

    - name: Commenter l'erreur de test
      if: steps.test.outputs.test_error == 'true'
      uses: peter-evans/create-or-update-comment@v3
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## Rapport CI : Tests
          ```
          ${{ steps.test.outputs.test_output }}
          ```

    - name: Vérification des vulnérabilités
      id: vulnerability
      run: |
        echo -e "\e[1;34m🛡️ Vérification des vulnérabilités connues...\e[0m"
        vulnerability_output=""
        while read pkg; do
          result=$(curl -s "https://pub.dev/api/packages/${pkg%@*}/versions/${pkg#*@}" | jq -r '.vulnerability')
          if [ "$result" != "null" ]; then
            vulnerability_output+="⚠️ Vulnérabilité détectée pour $pkg: $result\n"
          fi
        done < <(flutter pub deps --json | jq -r '.packages[] | .name + "@" + .version')
        echo "$vulnerability_output" > vulnerability_output.txt
        echo "vuln_output<<EOF" >> $GITHUB_OUTPUT
        cat vulnerability_output.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        if [ -n "$vulnerability_output" ]; then
          echo "vuln_error=true" >> $GITHUB_OUTPUT
        else
          echo "vuln_error=false" >> $GITHUB_OUTPUT
        fi
        echo -e "\e[1;32m✅ Vérification des vulnérabilités terminée !\e[0m"

    - name: Commenter les vulnérabilités
      if: steps.vulnerability.outputs.vuln_error == 'true'
      uses: peter-evans/create-or-update-comment@v3
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## Rapport CI : Vulnérabilités
          ```
          ${{ steps.vulnerability.outputs.vuln_output }}
          ```

    - name: Vérifier le statut final
      id: final_check
      run: |
        if [[ "${{ steps.format.outputs.format_error }}" == "false" && \
              "${{ steps.analyze.outputs.analyze_error }}" == "false" && \
              "${{ steps.test.outputs.test_error }}" == "false" && \
              "${{ steps.vulnerability.outputs.vuln_error }}" == "false" ]]; then
          echo "all_passed=true" >> $GITHUB_OUTPUT
        else
          echo "all_passed=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Commenter le succès
      if: steps.final_check.outputs.all_passed == 'true'
      uses: peter-evans/create-or-update-comment@v3
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## Rapport CI : Code propre
          ✅ Toutes les vérifications sont passées. Le code est propre et prêt à être fusionné.
